# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
networks:
  nodejs:
    driver: bridge
services:
  mysql-db:
    image: mysql:latest
    container_name: mysql-db
    restart: always
    ports:
      - "3309:3306"
    volumes:
      - db_data:/var/lib/mysql
    environment:
      # Các thông số này thay đổi theo password mysql trên máy bạn nhé.
      MYSQL_ROOT_PASSWORD: gin@17022001
      MYSQL_DATABASE: web
    networks:
      - nodejs
    expose:
      - 3306
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
  server:
    build:
      context: .
    restart: unless-stopped
    stdin_open: true
    tty: true
    env_file:
      - .env
    environment:
      DB_HOST: mysql-db
      DB_PORT: 3306
      NODE_ENV: production
    ports:
      - 3000:3000
    volumes:
      - ./src/public:/usr/src/app/src/public:rw
    depends_on: # Add this line to specify dependencies
      mysql-db: # Specify that this service depends on mysql-db
        condition: service_healthy
    networks:
      - nodejs
volumes:
  db_data:
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

